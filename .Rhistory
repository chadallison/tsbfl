get_pbp_game(401583598) |>
filter(shot_outcome == "made") |>
mutate(shot_pts = case_when(three_pt == T ~ 3,
three_pt == F & free_throw == F ~ 2,
free_throw == T ~ 1))
get_pbp_game(401583598) |>
filter(shot_outcome == "made") |>
mutate(shot_pts = case_when(three_pt == T ~ 3,
three_pt == F & free_throw == F ~ 2,
free_throw == T ~ 1)) |>
group_by(shot_team, half) |>
summarise(pts = sum(shot_pts),
.groups = "drop")
35+37
26+29
end
end |>
filter(win_team == "North Carolina")
get_pbp_game(401583598) |>
filter(shot_outcome == "made") |>
mutate(shot_pts = case_when(three_pt == T ~ 3,
three_pt == F & free_throw == F ~ 2,
free_throw == T ~ 1)) |>
group_by(shot_team, half) |>
summarise(pts = sum(shot_pts),
.groups = "drop")
get_pbp_game(401583598) |>
filter(shot_outcome == "made")
get_pbp_game(401583598) |>
filter(shot_outcome == "made") |>
mutate(shot_pts = ifelse(free_throw == T, 1, ifelse(three_pt == T, 3, 1))) |>
group_by(shot_team, half) |>
summarise(pts = sum(shot_pts),
.groups = "drop")
get_pbp_game(401583598) |>
filter(shot_outcome == "made") |>
mutate(shot_pts = ifelse(free_throw == T, 1, ifelse(three_pt == T, 3, 1))) |>
count(shot_pts)
get_pbp_game(401583598) |>
filter(shot_outcome == "made") |>
mutate(shot_pts = ifelse(free_throw == T, 1, ifelse(three_pt == T, 3, 2))) |>
count(shot_pts)
get_pbp_game(401583598) |>
filter(shot_outcome == "made") |>
mutate(shot_pts = ifelse(free_throw == T, 1, ifelse(three_pt == T, 3, 2))) |>
group_by(shot_team, half) |>
summarise(pts = sum(shot_pts),
.groups = "drop")
get_pbp_game(401583598)
get_pbp_game(401583598) |>
arrange(play_id)
get_pbp_game(401583598) |>
mutate(prev_home_score = lag(home_score),
prev_away_score = lag(away_score),
home_score_diff = home_score - prev_home_score,
away_score_diff = away_score - prev_away_score)
get_pbp_game(401583598) |>
mutate(prev_home_score = lag(home_score),
prev_away_score = lag(away_score),
home_score_diff = home_score - prev_home_score,
away_score_diff = away_score - prev_away_score) |>
group_by(half) |>
summarise(home_pts = sum(home_score_diff),
away_pts = sum(away_score_diff))
get_pbp_game(401583598) |>
mutate(prev_home_score = lag(home_score),
prev_away_score = lag(away_score),
home_score_diff = home_score - prev_home_score,
away_score_diff = away_score - prev_away_score) |>
group_by(half) |>
summarise(home_pts = sum(home_score_diff, na.rm = T),
away_pts = sum(away_score_diff, na.rm = T))
get_pbp_game(401583598) |>
mutate(prev_home_score = lag(home_score),
prev_away_score = lag(away_score),
home_score_diff = home_score - prev_home_score,
away_score_diff = away_score - prev_away_score) |>
group_by(half) |>
summarise(home_pts = sum(home_score_diff, na.rm = T),
away_pts = sum(away_score_diff, na.rm = T))
get_half_scores = function(game_id) {
return(get_pbp_game(game_id) |>
mutate(prev_home_score = lag(home_score),
prev_away_score = lag(away_score),
home_score_diff = home_score - prev_home_score,
away_score_diff = away_score - prev_away_score) |>
group_by(half) |>
summarise(home_pts = sum(home_score_diff, na.rm = T),
away_pts = sum(away_score_diff, na.rm = T)))
}
get_half_scores(401583598)
get_half_scores = function(game_id) {
return(get_pbp_game(game_id) |>
mutate(prev_home_score = lag(home_score),
prev_away_score = lag(away_score),
home_score_diff = home_score - prev_home_score,
away_score_diff = away_score - prev_away_score) |>
group_by(half) |>
summarise(home_pts = sum(home_score_diff, na.rm = T),
away_pts = sum(away_score_diff, na.rm = T)) |>
mutate(game_id = game_id))
}
get_half_scores(401583598)
get_half_scores = function(game_id) {
return(get_pbp_game(game_id) |>
mutate(prev_home_score = lag(home_score),
prev_away_score = lag(away_score),
home_score_diff = home_score - prev_home_score,
away_score_diff = away_score - prev_away_score) |>
group_by(half) |>
summarise(home_pts = sum(home_score_diff, na.rm = T),
away_pts = sum(away_score_diff, na.rm = T)) |>
mutate(game_id = game_id) |>
select(game_id, half, home_pts, away_pts))
}
get_half_scores(401583598)
get_half_scores = function(game_id) {
return(get_pbp_game(game_id) |>
mutate(prev_home_score = lag(home_score),
prev_away_score = lag(away_score),
home_score_diff = home_score - prev_home_score,
away_score_diff = away_score - prev_away_score) |>
group_by(half) |>
summarise(home_pts = sum(home_score_diff, na.rm = T),
away_pts = sum(away_score_diff, na.rm = T)) |>
transmute(game_id = game_id, half, home_pts, away_pts))
}
get_half_scores(401583598)
end
end$game_id
end
some_ids = sample(end$game_id, 10)
get_half_scores = function(game_id) {
return(get_pbp_game(game_id) |>
mutate(prev_home_score = lag(home_score),
prev_away_score = lag(away_score),
home_score_diff = home_score - prev_home_score,
away_score_diff = away_score - prev_away_score) |>
group_by(half) |>
summarise(home_pts = sum(home_score_diff, na.rm = T),
away_pts = sum(away_score_diff, na.rm = T)) |>
transmute(game_id = game_id, half, home_pts, away_pts))
}
some_ids = sample(end$game_id, 10)
for (id in some_ids) {
print(get_half_scores(id))
}
some_ids
for (id in some_ids) {
print(get_half_scores(id))
}
get_half_scores(some_ids[1])
some_ids
get_half_scores(some_ids[2])
end |>
filter(win_team == "North Carolina")
end |>
filter(win_team == "North Carolina") |>
pull(game_id)
get_half_scores = function(game_id) {
return(get_pbp_game(game_id) |>
mutate(prev_home_score = lag(home_score),
prev_away_score = lag(away_score),
home_score_diff = home_score - prev_home_score,
away_score_diff = away_score - prev_away_score) |>
group_by(half) |>
summarise(home_pts = sum(home_score_diff, na.rm = T),
away_pts = sum(away_score_diff, na.rm = T)) |>
transmute(game_id = game_id, half, home_pts, away_pts))
}
unc_ids = end |>
filter(win_team == "North Carolina") |>
pull(game_id)
for (id in unc_ids) {
print(get_half_scores(id))
}
unc_ids
get_half_scores(401581599)
unc_ids
get_half_scores(401583596)
library(tidyverse)
library(tidymodels)
library(tvthemes)
library(janitor)
library(ncaahoopR)
theme_custom = theme_avatar() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, size = 9, vjust = 2.5, face = "italic"),
plot.caption = element_text(face = "italic"),
panel.grid.major = element_line(linewidth = 0.5, colour = "#DFDAD1"),
panel.grid.minor = element_line(linewidth = 0.5, colour = "#DFDAD1"))
theme_set(theme_custom)
opening_day = as_date("2023-11-06")
today = Sys.Date()
season_dates = as.character(seq.Date(from = opening_day, to = today, by = 1))
res = read_csv("data/end_games.csv", show_col_types = F)
existing_dates = unique(res$date)
loop_dates = season_dates[!season_dates %in% existing_dates]
# res = data.frame()
for (date in loop_dates) {
new = get_master_schedule(date)
res = rbind(res, new)
}
write_csv(res, "data/end_games.csv")
end = res |>
filter(!is.na(home_score)) |>
mutate(win_team = ifelse(home_score > away_score, home, away),
lose_team = ifelse(home_score > away_score, away, home),
win_score = ifelse(home_score > away_score, home_score, away_score),
lose_score = ifelse(home_score > away_score, away_score, home_score))
all_teams = sort(unique(c(unique(end$win_team), unique(end$lose_team))))
data.frame(team = all_teams) |>
left_join(end |>
count(win_team) |>
setNames(c("team", "wins")), by = "team") |>
left_join(end |>
count(lose_team) |>
setNames(c("team", "losses")), by = "team") |>
mutate(wins = replace_na(wins, 0),
losses = replace_na(losses, 0),
games = wins + losses,
win_pct = round(wins / games, 3)) |>
arrange(desc(win_pct))
get_team_off_ppg = function(team) {
home = end |> filter(home == team) |> pull(home_score)
away = end |> filter(away == team) |> pull(away_score)
return(round(mean(c(home, away)), 3))
}
get_team_def_ppg = function(team) {
home = end |> filter(home == team) |> pull(away_score)
away = end |> filter(away == team) |> pull(home_score)
return(round(mean(c(home, away)), 3))
}
data.frame(team = all_teams) |>
mutate(off_ppg = sapply(team, get_team_off_ppg),
def_ppg = sapply(team, get_team_def_ppg),
diff = off_ppg - def_ppg) |>
ggplot(aes(off_ppg, def_ppg)) +
geom_point(aes(col = diff), show.legend = F) +
scale_color_gradient(low = "indianred3", high = "springgreen4") +
labs(x = "Offensive PPG", y = "Defensive PPG",
title = "Scatterplot of Offensive and Defensive PPG")
data.frame(team = all_teams) |>
left_join(end |>
count(win_team) |>
setNames(c("team", "wins")), by = "team") |>
left_join(end |>
count(lose_team) |>
setNames(c("team", "losses")), by = "team") |>
mutate(wins = replace_na(wins, 0),
losses = replace_na(losses, 0),
games = wins + losses,
win_pct = round(wins / games, 3)) |>
arrange(desc(win_pct), desc(wins))
team_ppg = data.frame(team = all_teams) |>
mutate(off_ppg = sapply(team, get_team_off_ppg),
def_ppg = sapply(team, get_team_def_ppg),
diff = off_ppg - def_ppg)
team_ppg
team_ppg |>
slice_max(diff, n = 3, with_ties = F)
team_ppg |>
slice_max(diff, n = 3, with_ties = F) |>
pull(team)
top3 = team_ppg |>
slice_max(diff, n = 3, with_ties = F) |>
pull(team)
bottom3 = team_ppg |>
slice_min(diff, n = 3, with_ties = F) |>
pull(team)
team_ppg |>
mutate(top_lab = ifelse(team %in% top3, team, ""),
bot_lab = ifelse(team %in% bottom3, team, ""))
team_ppg
ncaahoopR::conf
ncaahoopR::ids
end
team_records = data.frame(team = all_teams) |>
left_join(end |>
count(win_team) |>
setNames(c("team", "wins")), by = "team") |>
left_join(end |>
count(lose_team) |>
setNames(c("team", "losses")), by = "team") |>
mutate(wins = replace_na(wins, 0),
losses = replace_na(losses, 0),
games = wins + losses,
win_pct = round(wins / games, 3)) |>
arrange(desc(win_pct), desc(wins))
team_records
team_records
team_records |>
filter(games >= 3)
team_records |>
filter(games >= 3) |>
pull(team)
eligible_teams = team_records |>
filter(games >= 3) |>
pull(team)
top3 = team_ppg |>
filter(team %in% eligible_teams) |>
slice_max(diff, n = 3, with_ties = F) |>
pull(team)
bottom3 = team_ppg |>
filter(team %in% eligible_teams) |>
slice_min(diff, n = 3, with_ties = F) |>
pull(team)
team_ppg |>
mutate(top_lab = ifelse(team %in% top3, team, ""),
bot_lab = ifelse(team %in% bottom3, team, ""))
ggplot(aes(off_ppg, def_ppg)) +
geom_point(aes(col = diff), show.legend = F) +
ggrepel::geom_text_repel(aes(label = top_lab)) +
scale_color_gradient(low = "indianred3", high = "springgreen4") +
labs(x = "Offensive PPG", y = "Defensive PPG",
title = "Scatterplot of Offensive and Defensive PPG")
team_ppg |>
mutate(top_lab = ifelse(team %in% top3, team, ""),
bot_lab = ifelse(team %in% bottom3, team, "")) |>
ggplot(aes(off_ppg, def_ppg)) +
geom_point(aes(col = diff), show.legend = F) +
ggrepel::geom_text_repel(aes(label = top_lab)) +
scale_color_gradient(low = "indianred3", high = "springgreen4") +
labs(x = "Offensive PPG", y = "Defensive PPG",
title = "Scatterplot of Offensive and Defensive PPG")
team_ppg |>
mutate(top_lab = ifelse(team %in% top3, team, ""),
bot_lab = ifelse(team %in% bottom3, team, "")) |>
ggplot(aes(off_ppg, def_ppg)) +
geom_point(aes(col = diff), show.legend = F) +
ggrepel::geom_text_repel(aes(label = top_lab), size = 3) +
scale_color_gradient(low = "indianred3", high = "springgreen4") +
labs(x = "Offensive PPG", y = "Defensive PPG",
title = "Scatterplot of Offensive and Defensive PPG")
team_ppg |>
mutate(top_lab = ifelse(team %in% top3, team, ""),
bot_lab = ifelse(team %in% bottom3, team, "")) |>
ggplot(aes(off_ppg, def_ppg)) +
geom_point(aes(col = diff), show.legend = F) +
ggrepel::geom_text_repel(aes(label = top_lab), size = 3, fontface = "italic") +
scale_color_gradient(low = "indianred3", high = "springgreen4") +
labs(x = "Offensive PPG", y = "Defensive PPG",
title = "Scatterplot of Offensive and Defensive PPG")
team_ppg |>
mutate(top_lab = ifelse(team %in% top3, team, ""),
bot_lab = ifelse(team %in% bottom3, team, "")) |>
ggplot(aes(off_ppg, def_ppg)) +
geom_point(aes(col = diff), show.legend = F) +
ggrepel::geom_text_repel(aes(label = top_lab), size = 3, fontface = "italic") +
ggrepel::geom_text_repel(aes(label = bot_lab), size = 3, fontface = "italic") +
scale_color_gradient(low = "indianred3", high = "springgreen4") +
labs(x = "Offensive PPG", y = "Defensive PPG",
title = "Scatterplot of Offensive and Defensive PPG")
eligible_teams = team_records |>
filter(games >= 4) |>
pull(team)
top3 = team_ppg |>
filter(team %in% eligible_teams) |>
slice_max(diff, n = 3, with_ties = F) |>
pull(team)
bottom3 = team_ppg |>
filter(team %in% eligible_teams) |>
slice_min(diff, n = 3, with_ties = F) |>
pull(team)
team_ppg |>
mutate(top_lab = ifelse(team %in% top3, team, ""),
bot_lab = ifelse(team %in% bottom3, team, "")) |>
ggplot(aes(off_ppg, def_ppg)) +
geom_point(aes(col = diff), show.legend = F) +
ggrepel::geom_text_repel(aes(label = top_lab), size = 3, fontface = "italic") +
ggrepel::geom_text_repel(aes(label = bot_lab), size = 3, fontface = "italic") +
scale_color_gradient(low = "indianred3", high = "springgreen4") +
labs(x = "Offensive PPG", y = "Defensive PPG",
title = "Scatterplot of Offensive and Defensive PPG")
team_ppg |>
mutate(top_lab = ifelse(team %in% top3, team, ""),
bot_lab = ifelse(team %in% bottom3, team, "")) |>
ggplot(aes(off_ppg, def_ppg)) +
geom_point(aes(col = diff), show.legend = F) +
ggrepel::geom_text_repel(aes(label = top_lab), size = 3, fontface = "italic") +
ggrepel::geom_text_repel(aes(label = bot_lab), size = 3, fontface = "italic", max.overlaps = 5) +
scale_color_gradient(low = "indianred3", high = "springgreen4") +
labs(x = "Offensive PPG", y = "Defensive PPG",
title = "Scatterplot of Offensive and Defensive PPG")
team_ppg |>
mutate(top_lab = ifelse(team %in% top3, team, ""),
bot_lab = ifelse(team %in% bottom3, team, "")) |>
ggplot(aes(off_ppg, def_ppg)) +
geom_point(aes(col = diff), show.legend = F) +
ggrepel::geom_text_repel(aes(label = top_lab), size = 3, fontface = "italic") +
ggrepel::geom_text_repel(aes(label = bot_lab), size = 3, fontface = "italic", max.overlaps = 100) +
scale_color_gradient(low = "indianred3", high = "springgreen4") +
labs(x = "Offensive PPG", y = "Defensive PPG",
title = "Scatterplot of Offensive and Defensive PPG")
team_ppg |>
mutate(top_lab = ifelse(team %in% top3, team, "")) |>
ggplot(aes(off_ppg, def_ppg)) +
geom_point(aes(col = diff), show.legend = F) +
ggrepel::geom_text_repel(aes(label = top_lab), size = 3, fontface = "italic") +
scale_color_gradient(low = "indianred3", high = "springgreen4") +
labs(x = "Offensive PPG", y = "Defensive PPG",
title = "Scatterplot of Offensive and Defensive PPG")
get_team_off_ppg = function(team) {
home = end |> filter(home == team) |> pull(home_score)
away = end |> filter(away == team) |> pull(away_score)
return(round(mean(c(home, away)), 3))
}
get_team_def_ppg = function(team) {
home = end |> filter(home == team) |> pull(away_score)
away = end |> filter(away == team) |> pull(home_score)
return(round(mean(c(home, away)), 3))
}
team_ppg = data.frame(team = all_teams) |>
mutate(off_ppg = sapply(team, get_team_off_ppg),
def_ppg = sapply(team, get_team_def_ppg),
diff = off_ppg - def_ppg)
eligible_teams = team_records |>
filter(games >= 4) |>
pull(team)
top3 = team_ppg |>
filter(team %in% eligible_teams) |>
slice_max(diff, n = 3, with_ties = F) |>
pull(team)
team_ppg |>
mutate(top_lab = ifelse(team %in% top3, team, "")) |>
ggplot(aes(off_ppg, def_ppg)) +
geom_point(aes(col = diff), show.legend = F) +
ggrepel::geom_text_repel(aes(label = top_lab), size = 3, fontface = "italic") +
scale_color_gradient(low = "indianred3", high = "springgreen4") +
labs(x = "Offensive PPG", y = "Defensive PPG",
title = "Scatterplot of Offensive and Defensive PPG")
eligible_teams = team_records |>
filter(games >= 3) |>
pull(team)
top3 = team_ppg |>
filter(team %in% eligible_teams) |>
slice_max(diff, n = 3, with_ties = F) |>
pull(team)
team_ppg |>
mutate(top_lab = ifelse(team %in% top3, team, "")) |>
ggplot(aes(off_ppg, def_ppg)) +
geom_point(aes(col = diff), show.legend = F) +
ggrepel::geom_text_repel(aes(label = top_lab), size = 3, fontface = "italic") +
scale_color_gradient(low = "indianred3", high = "springgreen4") +
labs(x = "Offensive PPG", y = "Defensive PPG",
title = "Scatterplot of Offensive and Defensive PPG")
team_ppg |>
mutate(top_lab = ifelse(team %in% top3, team, "")) |>
ggplot(aes(off_ppg, def_ppg)) +
geom_point(aes(col = diff), show.legend = F) +
ggrepel::geom_text_repel(aes(label = top_lab), size = 3, fontface = "italic") +
scale_color_gradient(low = "indianred3", high = "springgreen4") +
labs(x = "Offensive PPG", y = "Defensive PPG",
title = "Scatterplot of Offensive and Defensive PPG",
subtitle = "Labeled teams have a top 3 differential")
team_ppg |>
mutate(top_lab = ifelse(team %in% top3, team, "")) |>
ggplot(aes(off_ppg, def_ppg)) +
geom_point(aes(col = diff), show.legend = F) +
ggrepel::geom_text_repel(aes(label = top_lab), size = 3, fontface = "italic") +
scale_color_gradient(low = "indianred3", high = "springgreen4") +
labs(x = "Offensive PPG", y = "Defensive PPG",
title = "Scatterplot of Offensive and Defensive PPG",
subtitle = "Labeled teams have a top-three differential")
team_ppg |>
mutate(top_lab = ifelse(team %in% top3, team, "")) |>
ggplot(aes(off_ppg, def_ppg)) +
geom_point(aes(col = diff), show.legend = F) +
ggrepel::geom_text_repel(aes(label = top_lab), size = 3, fontface = "italic") +
geom_abline() +
scale_color_gradient(low = "indianred3", high = "springgreen4") +
labs(x = "Offensive PPG", y = "Defensive PPG",
title = "Scatterplot of Offensive and Defensive PPG",
subtitle = "Labeled teams have a top-three differential")
team_ppg |>
mutate(top_lab = ifelse(team %in% top3, team, "")) |>
ggplot(aes(off_ppg, def_ppg)) +
geom_point(aes(col = diff), show.legend = F) +
ggrepel::geom_text_repel(aes(label = top_lab), size = 3, fontface = "italic") +
geom_abline(linetype = "dashed", alpha = 0.5) +
scale_color_gradient(low = "indianred3", high = "springgreen4") +
labs(x = "Offensive PPG", y = "Defensive PPG",
title = "Scatterplot of Offensive and Defensive PPG",
subtitle = "Labeled teams have a top-three differential")
team_ppg |>
mutate(top_lab = ifelse(team %in% top3, team, "")) |>
ggplot(aes(off_ppg, def_ppg)) +
geom_point(aes(col = diff), show.legend = F) +
ggrepel::geom_text_repel(aes(label = top_lab), size = 3, fontface = "italic") +
geom_abline(linetype = "dashed", alpha = 0.25) +
scale_color_gradient(low = "indianred3", high = "springgreen4") +
labs(x = "Offensive PPG", y = "Defensive PPG",
title = "Scatterplot of Offensive and Defensive PPG",
subtitle = "Labeled teams have a top-three differential")
get_half_scores = function(game_id) {
return(get_pbp_game(game_id) |>
mutate(prev_home_score = lag(home_score),
prev_away_score = lag(away_score),
home_score_diff = home_score - prev_home_score,
away_score_diff = away_score - prev_away_score) |>
group_by(half) |>
summarise(home_pts = sum(home_score_diff, na.rm = T),
away_pts = sum(away_score_diff, na.rm = T)) |>
transmute(game_id = game_id, half, home_pts, away_pts))
}
unc_ids = end |>
filter(win_team == "North Carolina") |>
pull(game_id)
for (id in unc_ids) {
print(get_half_scores(id))
}
get_half_scores(401583596)
